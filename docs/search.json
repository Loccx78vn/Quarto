[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Logistics concepts",
    "section": "",
    "text": "So let’s pratice !!!\nI will copy the original dataset to other object. I think it’s a good habit because sometime you code wrong leading to wrong result and you want to run again but the previous object have changed to new one so you should import the data again. It’s not smooth.\nAdjusting to the standardize form to suitalbe for coding in R. Remember df have a column refer to datetime class, you should divide into 2 cols: date and time cols separately. You should download this data procurement_data before.\n## Copy into new object:\ndf&lt;-procurement_data \n\n## Adjusting:\ndf&lt;-df %&gt;% \n  # standardize column name syntax\n    janitor::clean_names() %&gt;% \n    distinct() \n\ndf &lt;- df %&gt;% \n  # break the datetime PO into date and time cols separately\n    mutate(po_date = as.Date(df$po_date_time),\n           po_time = hms(format(df$po_date_time,\"%H:%M:%S\")))\n\ndf$money&lt;-runif(nrow(df),1000,10000)"
  },
  {
    "objectID": "projects.html#abc-analyst",
    "href": "projects.html#abc-analyst",
    "title": "Logistics concepts",
    "section": "ABC analyst:",
    "text": "ABC analyst:\nIn supply chain management, you typically encounter the task of ABC analysis to classify your major customers by comparing their revenue or purchase frequency. Next, I select the vendor’s name and the amount of the purchase order and present it.\n\nm&lt;-df %&gt;% \n  select(c(vendor_name,po_amount)) %&gt;% \n  group_by(vendor_name) %&gt;% \n  summarise(sum = sum(po_amount)) %&gt;% \n  ungroup()\n\nm&lt;-within(m, {\n    cum_per &lt;- cumsum(rev(sort(sum)))/sum(sum)\n    group &lt;- ifelse(cum_per &gt; 0.91, \"A\",\n           ifelse(cum_per &lt; 0.81, \"B\", \"C\"))\n})\n\nNow we have classified all the companies on our list, but we need to be prepared for any future collaborations. When considering collab with a new company, we will need to know which classification it falls under in order to decide whether to sign a long-term contract. In this section, I’d like to introduce the Random Forests method, a machine learning algorithm that combines the outputs of multiple decision trees to produce a single result. For more details, you can refer to this page: Random Forest\nIn R, we can easily implement this using the following code. It’s important to note a few things:\n\nThe rpart function has default parameters that can limit the growth of the tree, so we should consider adjusting them. For example:\n\nThe argument “minsplit” represents the minimum number of observations required in a node for a split to be attempted.\nThe argument “minbucket” represents the minimum number of observations in any terminal node. We should observe the impact of overriding these parameters.\n\nPackage {parttree} maybe not avaliable in your Rstudio version. You can update your version or directly install from online source by function remote::install_github(\"https://github.com/grantmcdermott/parttree\")\n\n\ndf1&lt;-left_join(m %&gt;% select(c(vendor_name, group)),\n               df,\n               by = \"vendor_name\")\n\nlibrary(rpart)\nlibrary(parttree)\ntree&lt;-rpart(po_amount ~ po_saving_amount + money, data = df1)\n\nggplot(data = df1,\n       aes(x = po_saving_amount,\n           y = money))+\n  geom_parttree(data = tree,\n                aes(fill = po_amount),\n                alpha = 0.3)+\n  geom_point(aes(col = po_amount))+\n  theme_minimal() +\n  scale_fill_distiller(\n    limits = range(df1$po_amount, na.rm = TRUE), \n    aesthetics = c('colour', 'fill')\n  )\n\n\n\n\nThe cluster of customer group based on the total PO amount"
  },
  {
    "objectID": "projects.html#reactable-table",
    "href": "projects.html#reactable-table",
    "title": "Logistics concepts",
    "section": "Reactable table:",
    "text": "Reactable table:\nBut look again your output, the table is boring and the name of columns is abbreviation so it perhaps lead to viewer’s misunderstanding. In order to familier with reader, R have package {reactable} help us to implement beautiful interactive dashboard.\nSo before implementing, I will build a function to add reactivity in dashboard, which’s similar with us that is filter button. I get this code from Albert Rapp and I think you gonna love his education posts about technical field.\n\nfilter_fct &lt;- function(values, name) {\n  tags$select(\n    tags$option(value = \"\", \"All\"),\n    purrr::map(unique(values), tags$option),\n    onchange = glue::glue(\n      \"Reactable.setFilter(\n        'my-tbl', \n        '{name}', \n        event.target.value  // This is the value of the dropdown menu\n      )\"\n    )\n  )\n}\n\n\nlibrary(reactable)\nlibrary(sparkline)\nlibrary(htmltools)\nreactable(\n  df %&gt;% select(tran_status,\n                po_amount,\n                po_number,\n                money) %&gt;% \n    mutate(p = money/po_amount),\n  filterable = TRUE, \n  minRows = 10,\n  searchable = TRUE,\n  compact = TRUE,\n  paginationType = \"jump\",    #\"jump\" to show a page jump\n  showPageSizeOptions = TRUE, \n  defaultPageSize = 20,\n  columns = list(\n    po_number = colDef(name = \"Number of PO\",\n                       filterInput = filter_fct),\n    tran_status = colDef(name = \"Status of transaction\",\n                         footer = \"Total\",\n                         cell = function(value) {\n    if (value == \"Fully Billed\") \"\\u2714\\ufe0f Yes\" \n        \n      else if (value == \"Pending Bill\"|value ==\"Pending Receipt\"|value ==\"Closed\") browsable(div(shiny::icon('warning', \n                                     class = 'fas',  \n                                     style = 'color: orange'),\"Warning\"))  else  \"\\u274c No\"}),\n    money = colDef(name = \"Total amount\",\n                   aggregate = \"sum\", \n                   format = colFormat(currency = \"USD\")),\n    po_amount = colDef(name = \"Quantity of PO\",\n                       aggregate = \"sum\"),\n    p = colDef(name = \"Percentage\",\n               aggregate = \"mean\")\n  )\n)\n\n\n\n\n\n\n\nlibrary(ggiraph)\n\nWarning: package 'ggiraph' was built under R version 4.2.3\n\np1&lt;-df %&gt;% \n  mutate(tooltip_label = glue::glue('The total quantity PO is {po_amount}&lt;br&gt; with value is {round(money,2)}')) %&gt;%\n  ggplot(aes(x = po_amount,\n              y = money,\n              col = tran_status)) +\n  geom_point_interactive(size = 4,\n                         aes(tooltip = tooltip_label)) +\n  theme_minimal()\n\ngirafe(ggobj = p1,\n       options = list(\n         \n         opts_hover(css = ''),\n         opts_hover_inv(css = \"opacity:0.1;\"),\n         opts_sizing(rescale = FALSE) \n         ),\n         height_svg = 6,\n         width_svg = 8\n       )\n\n\n\n\n\n\nlibrary(lubridate)\nlibrary(ggiraph)\ndf&lt;-df %&gt;% \n  mutate(\n    receiving_department = as.factor(receiving_department),\n    id = levels(receiving_department)[as.numeric(receiving_department)],\n         receiving_department = forcats::fct_reorder(receiving_department, po_amount)\n)\n\np1&lt;-df %&gt;% \n  mutate(Month = as.Date(paste(month(po_date),\"01\",year(po_date),sep = \"/\"),format = \"%m/%d/%Y\")) %&gt;%\n  group_by(Month,receiving_department,id) %&gt;% \n  summarise(mean = mean(money)) %&gt;% \n  ggplot(aes(y = mean, \n             x = Month,\n             col = receiving_department,\n             data_id = id))+\n    geom_line_interactive(linewidth = 2.5) +\n    geom_point_interactive(size = 4) +\n  labs(\n    x = \"Month\",\n    y = \"The total revenue\",\n    title = \"The line chart of revenue monthly\"\n  )+\n  theme(\n    text = element_text(\n      color = 'grey20'\n    ),\n    legend.position = 'none',\n    panel.grid.minor = element_blank(),\n    plot.title.position = 'plot'\n  ) \n\n`summarise()` has grouped output by 'Month', 'receiving_department'. You can\noverride using the `.groups` argument.\n\np2&lt;-df %&gt;% \n  ggplot(aes(x = money, \n             y = receiving_department, \n             fill = receiving_department,\n             data_id = id))+\n    geom_boxplot_interactive(position = position_nudge(y = 0.25),\n                             width = 0.5)+\n    labs(\n    x = \"The total revenue\",\n    y = element_blank(),\n    title = \"The KPI achieved by receiving_department\")\n\nlibrary(patchwork)\ngirafe(ggobj = p1/p2 + plot_spacer() + plot_layout(widths = c(0.45, 0.1, 0.45)),\n       options = list(\n         \n         opts_hover(css = ''),\n         opts_hover_inv(css = \"opacity:0.1;\"),\n         opts_sizing(rescale = FALSE) \n         ),\n         height_svg = 6,\n         width_svg = 10\n       )\n\n\n\n\n\nNext we will move to the next section is about: Spatial analyst"
  },
  {
    "objectID": "spatial.html",
    "href": "spatial.html",
    "title": "Spatial analyst",
    "section": "",
    "text": "So let’s pratice !!!"
  },
  {
    "objectID": "spatial.html#spatial-analyst",
    "href": "spatial.html#spatial-analyst",
    "title": "Spatial analyst",
    "section": "Spatial analyst:",
    "text": "Spatial analyst:\nNow let’s start with data contains the information of longitude and latitude of customer’s locations. Member install data optimize before.\n\n#New manufacter:\nnew_manufacter= data.frame(\n  Customers = str_c(rep(\"Manufacter\"),1:3),\n  Latitude =c(21.12256201,21.68421,20.34250),\n  Longitude = c(105.9150683,105.1940,106.2946),\n  Total.transactions = c(0,0,0),\n  Inventory = c(3000,2000,2500))\n\nroute&lt;-rbind(new_manufacter,\n             optimize%&gt;% select(Customers,\n                                Longitude,\n                                Latitude,\n                                Total.transactions) %&gt;% \n               mutate(Inventory = round(runif(50,100,400)))\n)\n\ncolnames(route)[4]&lt;-\"Demand\"\n\nroute$Node&lt;-1:nrow(route)\n\n## Adding status:\nroute$Status &lt;- ifelse(route$Inventory - route$Demand &gt; round(mean(route$Demand)/2),\"Control\",ifelse(route$Inventory- route$Demand  &gt; 0,\"Warning\",\"Outstock\" ))\n\nSo we have enough data to pratice. Let show this data in map for clearly understading.\n\nMap of supply chain management\n\n#Prepare labels:\nlabels&lt;- paste0(\"&lt;strong&gt; Customers &lt;/strong&gt; \",\n               route$Customers, \"&lt;br/&gt; \",\n               \"&lt;strong&gt; Inventory: &lt;/strong&gt; \",\n               route$Inventory, \"&lt;br/&gt; \",\n               \"&lt;strong&gt; Demand &lt;/strong&gt; \",\n               route$Demand, \"&lt;br/&gt; \",\n               \"&lt;strong&gt; Status &lt;/strong&gt; \",\n               route$Status, \"&lt;br/&gt; \") %&gt;% \n         lapply(htmltools::HTML)\n\nlibrary(leaflet)\nlibrary(fontawesome) \n#If you don't have, try to install by: devtools::install_github(\"rstudio/fontawesome\")\nlogos &lt;- awesomeIconList(\n  Customer = makeAwesomeIcon(\n    icon = \"home\",\n    iconColor = \"white\",\n    markerColor = \"blue\",\n    library = \"fa\"),\n  Manufacter = makeAwesomeIcon(\n    icon = \"beer\",\n    iconColor = \"gold\",\n    markerColor = \"black\",\n    library = \"fa\")\n)\n\n#Prepare the logos:\nroute$ticker&lt;-c(rep(\"Manufacter\",3),\n                rep(\"Customer\",\n                    nrow(route)-3))\n\nleaflet(data = route) %&gt;% \n  addTiles() %&gt;%\n  addAwesomeMarkers(\n             lng = ~Longitude, \n             lat = ~Latitude, \n             label = ~labels,\n             icon = ~logos[ticker]) %&gt;% \n  setView(lng = mean(route$Longitude), \n          lat = mean(route$Latitude),\n          zoom = 7) \n\n\n\nThe location of all customers and internal manufacters\n\n\nIn the following code, I want to emphasize that the names of colors should have the first letter capitalized. For example, use “Red” instead of “red”.\nYou might be wondering why this is important, and I had the same question :)). After some online research, I found a response to a similar question about changing the color of markers in R using Leaflet Leaflet change color of markers (R).\nIt was mentioned that capitalizing the first letter allows R to color the markers based on different factors. If you don’t capitalize the first letter, R will color the markers randomly (I’m not sure why).\n\n#Setting the level of status\nroute$Status&lt;-fct_relevel(route$Status,\"Control\",\"Warning\",\"Outstock\")\n\n#Prepare palette for labeling control/warning/outstock:\npalPwr &lt;- leaflet::colorFactor(palette = c(\"Lightgreen\",\"Yellow\",\"Red\"), \n                               domain = route$Status,\n                               ordered = T)\n\n#Prepare font for labeling\nfont&lt;-labelOptions(noHide = T, \n                  direction = \"bottom\",\n                  style = list(\n        \"font-family\" = \"serif\",\n        \"font-style\" = \"ilatic\",\n        \"box-shadow\" = \"3px 3px rgba(0,0,0,0.25)\",\n        \"font-size\" = \"10px\",\n        \"border-color\" = \"rgba(0,0,0,0.5)\"\n      ))\n\n#Plot map with leaflet:\nlibrary(leaflet.extras)\n\nWarning: package 'leaflet.extras' was built under R version 4.2.3\n\nleaflet(data = route) %&gt;% \n  addProviderTiles(\"CartoDB.Positron\") %&gt;% \n  addCircleMarkers(radius = 10, # size of the dots\n                   fillOpacity = .7, # alpha of the dots\n                   stroke = FALSE, # no outline\n                   label = ~labels,\n                   lng = ~Longitude, \n                   lat = ~Latitude, \n                   color = ~palPwr(route$Status),\n                   clusterOptions = markerClusterOptions(),\n                   labelOptions = font) %&gt;% \n  leaflet::addLegend(position = \"bottomright\",\n            values = ~Status, # data frame column for legend\n            opacity = .7,\n            pal = palPwr, # palette declared earlier\n            title = \"Status\") %&gt;%   # legend titleƯ\n  addResetMapButton()\n\n\n\nThe mini map by clustering the locations\n\n\nAlso for adjusting the base map, you can base on the preview of base map in Leaflet preview and copy the name of provider to paste in the argument {addProviderTitles}. For instance, I use provider = CartoDB.Positron."
  },
  {
    "objectID": "spatial.html#routing-the-vehicles-path-for-supply-chain-plan",
    "href": "spatial.html#routing-the-vehicles-path-for-supply-chain-plan",
    "title": "Spatial analyst",
    "section": "Routing the vehicle’s path for Supply Chain Plan:",
    "text": "Routing the vehicle’s path for Supply Chain Plan:\nTo set up the connection between RStudio and GitHub, you can use the source() function and assign the URL link of the GitHub repository that contains the R script you need. Remember to click on “Raw” to move to another page and then copy that URL.\nI found the original code in Viktor Plamenov’s project on GitLab. I found it convenient to use, so I copied and uploaded it to my private GitHub repository. You can use this URL for your work.\nThe author created the package {vrpoptima} for easily install and using it. You can install by package {remote}, another details you can read in this link remotes\n\nlibrary(vrpoptima)\ncolnames(optimize)[2:3]&lt;-c(\"lat\",\"lon\")\ncolnames(new_manufacter)[2:3]&lt;-c(\"lat\",\"lon\")\n\nmat_optimize&lt;-as.matrix(optimize[,2:3])\n\ndist_optimize&lt;-as.matrix(geodist::geodist(mat_optimize,measure = 'haversine')/1000)\n\nmat_WH&lt;-as.matrix(new_manufacter[,2:3])\n\nNext, just simply add the criteria and run the code illustrated below.\n\n\n$routes\n          Visit_0 Visit_1 Visit_2 Visit_3 Visit_4 Visit_5 Visit_6 Visit_7\nVehicle_1       1       9      27      37      24      48      18      30\nVehicle_2       2      26      12      35      17      40       3      44\nVehicle_3       3      29      41      33      19      15      31      14\n          Visit_8 Visit_9 Visit_10 Visit_11 Visit_12 Visit_13 Visit_14 Visit_15\nVehicle_1       8      22       23       49       36       50       38       47\nVehicle_2      32      20        4       46       25       13       42        5\nVehicle_3      43      16        1       39        2       34       21        7\n          Visit_16 Visit_17 Visit_18 Visit_19 Visit_20 Visit_21\nVehicle_1       11        6       45       28        1       NA\nVehicle_2        2       NA       NA       NA       NA       NA\nVehicle_3       10        3       NA       NA       NA       NA\n\n$max_distance\n[1] 859.1384\n\n$dist_history\n   [1] 2157.0102 2019.8126 2019.8126 1993.6344 1962.7287 1929.4141 1929.4141\n   [8] 1838.2808 1838.2808 1838.2808 1829.7096 1829.7096 1820.7964 1792.3697\n  [15] 1792.3697 1789.3234 1779.1908 1779.1908 1768.4646 1768.4646 1695.6682\n  [22] 1695.6682 1695.6682 1691.3768 1688.8695 1573.9464 1526.4847 1526.4847\n  [29] 1526.4847 1526.4847 1524.2393 1524.2393 1511.3719 1511.3719 1511.3719\n  [36] 1511.3719 1511.3719 1506.9532 1506.9532 1506.9532 1476.2815 1476.2815\n  [43] 1476.2815 1461.1313 1461.1313 1461.1313 1461.1313 1454.0843 1426.1140\n  [50] 1426.1140 1407.0913 1407.0913 1403.3359 1403.3359 1403.3359 1402.8698\n  [57] 1400.5365 1400.5365 1400.5365 1400.5365 1400.5365 1400.5365 1336.9537\n  [64] 1336.9537 1336.5818 1336.5818 1332.9991 1332.9991 1332.9991 1332.9991\n  [71] 1332.9991 1305.5091 1305.5091 1305.5091 1293.7938 1293.7938 1293.7938\n  [78] 1293.5113 1293.5113 1293.5113 1293.5113 1293.5113 1289.1817 1289.1817\n  [85] 1289.1817 1289.0453 1288.0207 1288.0207 1288.0207 1288.0207 1288.0207\n  [92] 1287.5702 1287.5702 1287.5702 1287.5702 1287.5702 1284.4084 1284.4084\n  [99] 1272.1119 1267.3489 1267.3489 1267.3489 1267.3489 1260.7566 1260.7566\n [106] 1260.7566 1260.7566 1260.7566 1260.7566 1260.7566 1252.7571 1252.2824\n [113] 1252.2824 1252.2824 1252.2824 1249.5125 1249.5125 1248.2594 1248.2594\n [120] 1248.2594 1248.2594 1159.9196 1159.9196 1159.9196 1158.9226 1141.3769\n [127] 1141.3769 1141.3769 1133.7011 1133.7011 1133.7011 1132.6252 1132.6252\n [134] 1129.1544 1129.1544 1129.1544 1129.1544 1129.1544 1129.1544 1129.1544\n [141] 1129.1544 1129.1544 1129.1544 1129.1544 1122.1943 1122.1943 1122.1943\n [148] 1122.1943 1118.9316 1118.9316 1110.5421 1110.5421 1106.5385 1106.5385\n [155] 1106.5385 1106.5385 1106.5385 1106.5385 1106.5385 1106.5385 1101.9891\n [162] 1101.9891 1101.9891 1101.9891 1097.4732 1097.4732 1097.4732 1097.4732\n [169] 1097.4732 1097.4732 1097.4732 1097.4732 1097.4732 1094.5156 1094.5156\n [176] 1094.5156 1094.5156 1094.5156 1094.5156 1094.5156 1094.5156 1094.5156\n [183] 1094.5156 1094.5156 1094.5156 1088.5980 1088.5980 1088.5980 1023.0246\n [190] 1023.0246 1023.0246 1023.0246 1023.0246 1023.0246 1023.0246 1023.0246\n [197] 1020.9148 1020.9148 1020.9148 1020.9148 1020.9148 1020.9148 1020.9148\n [204] 1020.9148 1020.9148 1020.9148 1020.9148 1020.1796 1020.1796 1020.1796\n [211] 1019.8530 1014.2421 1014.2421 1010.2909 1010.2909 1010.2909 1010.2909\n [218] 1003.2305 1003.2305 1003.2305 1003.2305 1003.2305 1003.2305 1003.2305\n [225] 1003.2305 1003.2305 1003.2305 1003.2305 1003.2305 1003.2305  999.4814\n [232]  999.4814  999.4814  999.4814  999.4814  999.4814  999.4814  999.4814\n [239]  999.4814  999.4814  999.4814  999.4814  995.5133  995.5133  995.5133\n [246]  995.5133  995.5133  995.5133  995.5133  995.5133  995.5133  995.5133\n [253]  988.9405  988.9405  988.9405  988.9405  988.9405  988.9405  988.9405\n [260]  988.9405  988.9405  988.9405  988.9405  988.9405  988.9405  988.6217\n [267]  988.6217  988.6217  988.6217  988.6217  988.6217  988.6217  988.6217\n [274]  988.6217  988.6217  988.6217  973.7638  973.7638  973.7638  973.7638\n [281]  973.7638  973.7638  973.7638  973.7638  973.7638  973.7638  973.7638\n [288]  973.7638  973.5686  973.5686  973.5686  967.6367  967.6367  967.6367\n [295]  967.6367  967.6367  967.6367  967.6367  967.6367  967.6367  967.1687\n [302]  967.1687  967.1687  967.1687  967.1687  967.1687  965.2506  965.2506\n [309]  965.2506  952.3005  952.3005  952.3005  952.3005  952.3005  952.3005\n [316]  949.9239  949.9239  936.2193  936.2193  936.2193  933.7378  933.7378\n [323]  933.7378  933.7378  929.3341  929.3341  929.3341  929.3341  929.3341\n [330]  929.3341  929.3341  929.3341  929.3341  929.3341  929.3341  929.3341\n [337]  929.3341  919.5941  919.5941  919.5941  919.5941  919.5941  919.5941\n [344]  919.5941  919.5941  919.5941  919.5941  919.5941  919.5941  919.5941\n [351]  919.5941  919.5941  919.5941  918.8515  918.8515  918.8515  918.8515\n [358]  918.8515  918.8515  918.8515  903.6400  903.6400  903.6400  902.2651\n [365]  902.2651  902.2651  902.2651  902.2651  902.2651  902.2651  902.2651\n [372]  902.2651  902.2651  902.2651  902.2651  902.2651  902.2651  902.2651\n [379]  901.8053  901.8053  901.8053  901.8053  901.8053  901.8053  901.8053\n [386]  901.8053  901.8053  901.8053  900.7952  900.7952  900.7952  900.7952\n [393]  900.7952  900.7952  900.7952  900.7952  900.7952  900.7952  900.7952\n [400]  900.7952  900.7952  900.7952  900.7952  900.7952  900.7952  900.7952\n [407]  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420\n [414]  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420\n [421]  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420\n [428]  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420\n [435]  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420\n [442]  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420\n [449]  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420\n [456]  898.1420  898.1420  898.1420  898.1420  898.1420  898.1420  880.0303\n [463]  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303\n [470]  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303\n [477]  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303\n [484]  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303\n [491]  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303\n [498]  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303\n [505]  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303\n [512]  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303\n [519]  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303\n [526]  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303\n [533]  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303\n [540]  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303  880.0303\n [547]  880.0303  880.0303  880.0303  880.0303  880.0303  876.8357  876.8357\n [554]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [561]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [568]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [575]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [582]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [589]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [596]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [603]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [610]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [617]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [624]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [631]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [638]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [645]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [652]  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357  876.8357\n [659]  876.4823  876.4823  876.4823  876.4823  876.4823  876.4823  876.4823\n [666]  876.4823  876.4823  876.2715  876.2715  876.2715  876.2715  876.2715\n [673]  876.2715  876.2715  876.2715  876.2715  876.2715  876.2715  876.2715\n [680]  876.2715  876.2715  876.2715  876.2715  876.2715  876.2715  876.2715\n [687]  876.2715  876.2715  876.2715  876.2715  876.2715  876.2715  869.4151\n [694]  869.4151  869.4151  869.4151  869.4151  869.4151  869.3025  869.3025\n [701]  869.3025  869.3025  869.3025  869.3025  869.3025  869.3025  869.3025\n [708]  869.3025  869.3025  869.3025  869.3025  869.3025  869.3025  869.3025\n [715]  869.3025  869.3025  869.3025  869.3025  869.3025  869.3025  869.3025\n [722]  869.3025  869.3025  868.9277  868.9277  868.9277  868.9277  868.9277\n [729]  867.3143  867.3143  867.3143  867.3143  867.3143  867.3143  867.3143\n [736]  867.3143  867.3143  867.3143  867.3143  867.3143  867.3143  867.3143\n [743]  867.3143  867.3143  867.3143  867.3143  867.3143  867.3143  867.3143\n [750]  867.2557  867.2557  867.2557  867.2557  867.2557  867.2557  867.2557\n [757]  867.2557  867.2557  867.2557  867.2557  861.6750  861.6750  861.6750\n [764]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [771]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [778]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [785]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [792]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [799]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [806]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [813]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [820]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [827]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [834]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [841]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [848]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [855]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [862]  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750  861.6750\n [869]  861.6750  861.6750  861.6750  861.6750  861.6750  861.4012  861.4012\n [876]  861.4012  861.4012  861.4012  861.4012  861.4012  861.4012  861.4012\n [883]  861.4012  861.4012  861.4012  861.4012  861.4012  861.4012  861.4012\n [890]  861.4012  861.4012  861.4012  861.4012  861.4012  861.4012  861.4012\n [897]  861.4012  861.4012  861.4012  861.4012  861.4012  861.4012  861.4012\n [904]  861.4012  861.4012  861.4012  859.6236  859.6236  859.6236  859.6236\n [911]  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236\n [918]  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236\n [925]  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236\n [932]  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236\n [939]  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236\n [946]  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236\n [953]  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236\n [960]  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236\n [967]  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236  859.6236\n [974]  859.1384  859.1384  859.1384  859.1384  859.1384  859.1384  859.1384\n [981]  859.1384  859.1384  859.1384  859.1384  859.1384  859.1384  859.1384\n [988]  859.1384  859.1384  859.1384  859.1384  859.1384  859.1384  859.1384\n [995]  859.1384  859.1384  859.1384  859.1384  859.1384  859.1384\n\n$tour_lengths\n[1] 867.1374 842.1410 729.5229\n\n\nFinally, plot the results of optimization by two functions: * PlotToursCombined function: use to display of the combined routes created with the genetic program * PlotToursIndividual function: use to display of the individual routes created with the genetic program.\n\n#Plot the results:\nroutes &lt;- solution$routes\nrownames(routes) &lt;- 1:nrow(routes)\nroutes_list = RoutesDataPrep(routes = solution$routes, \n                             visit_points = mat_optimize, \n                             agent_points = as.matrix(new_manufacter[,2:3]))\n\n\n# Display all routes at the same time\nPlotToursCombined(solution = solution, \n                  routes_list = routes_list,\n                  agent_locations = as.matrix(new_manufacter[,2:3]),\n                  orientation = \"vertical\")\n\n\n\n# Display all the inidividual routes on a single figure block\nPlotToursIndividual(solution = solution, \n                    routes_list = routes_list)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "The field of Logistics and Supply Chain Management has been a popular topic for the past 10 years and continues to be relevant today. This trend is due to the ongoing evolution of global trade. Nowadays, businesses are not only focused on their market share in host country but also seek to expand into international markets. For example, some of the largest ports in the world, such as Busan port in Korea, Rotterdam port in Belgium, Singapore port, and Shanghai port in China, witness an average trade of 20-30 million TEU of goods annually. This is equivalent to about 20 million TEU multiplied by 2300, which equals 46000000 meter tons of goods. These staggering numbers reflect the bustling nature of international operations.for 10 years ago up to now. Main reason for this uptrend is the progressive evolution in global trading in the world. Nowadays, businesses not only cares about their market share in host country but also reach out to the international market.\nIn a lot of biggest port in the world such as Busan port in Korea, Rotterdam port in Belgium, Singapore port or Shanghai port in China, there are an average of 20-30 millions TEU of goods are traded yearly or in other means eqaul to 20*10^6*2300 meter tons of goods. That’s really big number reflect the bustle of international operations.\n\n\n\nDefinition of Supply Chain Management"
  },
  {
    "objectID": "index.html#prepare-a-list-of-packages",
    "href": "index.html#prepare-a-list-of-packages",
    "title": "Introduction",
    "section": "Prepare a list of packages:",
    "text": "Prepare a list of packages:\nFirstly, the frequency job when working with Rmarkdown is calling packages. You should list all packages is needed to call and then using this code: pacman::p_load(list_name_package). Below is the illustration.\n\n\nCode\n## Call packages:\npacman::p_load(rio,\n               here,\n               janitor,\n               tidyverse,\n               dplyr,\n               magrittr,\n               ggplot2,\n               purrr,\n               lubridate,\n               knitr,\n               shiny)"
  },
  {
    "objectID": "index.html#install-data",
    "href": "index.html#install-data",
    "title": "Introduction",
    "section": "Install data:",
    "text": "Install data:\nThen installing your data to R. I get it by my computer’s address, so if you want to use it, you should download file by click button. In this chapter, we just need 2 dataset.\n\n\nCode\nlibrary(downloadthis)\n\nprocurement_data %&gt;%\n  download_this(\n    output_name = \"procurement_data\",\n    output_extension = \".csv\",\n    button_label = \"Download data\",\n    button_type = \"warning\",\n    has_icon = TRUE,\n    icon = \"fa fa-save\"\n  )\n\n\n Download data\n\n\n\n\nCode\noptimize %&gt;%\n  download_this(\n    output_name = \"optimize\",\n    output_extension = \".csv\",\n    button_label = \"Download data\",\n    button_type = \"warning\",\n    has_icon = TRUE,\n    icon = \"fa fa-save\"\n  )\n\n\n Download data\n\n\nThanks for checking out my web site!"
  }
]